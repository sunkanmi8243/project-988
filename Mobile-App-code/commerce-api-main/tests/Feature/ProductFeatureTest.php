<?php

namespace Tests\Feature;

use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;

class ProductFeatureTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
    }

    /** @test */
    public function it_can_get_paginated_products_list()
    {
        Product::factory()->count(30)->create();

        $response = $this
            ->getJson(route('v1.products.index'))->assertOk();

        $response->assertJson(fn (AssertableJson $json) => $json
            ->where('status', true)
            ->where('message', 'success')
            ->has('data')
            ->has('meta')
            ->has('message')
            ->etc()
        );
    }

    /** @test */
    public function it_shows_one_product()
    {

        $product = Product::factory()->create();
        $response = $this->getJson($product->path(false, 'products'))->assertOk();

        $response->assertJson(fn (AssertableJson $json) => $json
            ->has('status')
            ->where('message', 'success')
            ->where('data.id', $product->id)
            ->where('data.name', $product->name)

            ->where('data.description', $product->description)
            ->where('data.status', $product->status->value)
            ->where('data.path', $product->path(true, 'products', 'slug'))
            ->etc()
        );
    }

    /** @test */
    public function it_can_search_paginate_product_records()
    {

        $product = Product::factory()->create([
            'name' => 'test record',
        ]);
        $response = $this
            ->getJson(route('v1.products.index', [
                'search' => $product->name,
            ]))->assertOk();

        $response->assertJson(fn (AssertableJson $json) => $json
            ->where('status', true)
            ->where('message', 'success')
            ->has('data', 1)
            ->has('meta')
            ->has('message')
            ->etc()
        );
    }
}
