<?php

namespace Tests\Feature\Auth;

use App\Models\Role;
use App\Models\User;
use App\Notifications\ApiEmailVerificationNotification;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;

class ApiRegistrationTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->role = Role::factory()->create([
            'name' => 'customer',
        ]);
    }

    /** @test */
    public function a_user_registration_request_requires_an_email()
    {
        $attributes = User::factory()->raw(['email' => '']);

        $this->postJson(route('v1.signup'), $attributes)
            ->assertJsonValidationErrors('email');
    }

    /** @test */
    public function a_user_registration_request_requires_a_firatname()
    {
        $attributes = User::factory()->raw(['firstname' => '']);

        $this->postJson(route('v1.signup'), $attributes)
            ->assertJsonMissingValidationErrors('firstname');
    }

    /** @test */
    public function a_user_registration_request_requires_a_lastname()
    {
        $attributes = User::factory()->raw(['lastname' => '']);

        $this->postJson(route('v1.signup'), $attributes)
            ->assertJsonMissingValidationErrors('lastname');
    }

    /** @test */
    public function a_user_registration_request_requires_email_but_cannot_accept_duplicate_email()
    {
        $user = User::factory()->create();
        $attributes = User::factory()->raw(['email' => $user->email]);

        $this->postJson(route('v1.signup'), $attributes)
            ->assertJsonValidationErrors('email');
    }

    /** @test */
    public function new_users_can_register(): void
    {
        $role = Role::factory()->create();
        $user = User::factory()->raw([
            'firstname' => 'Ugbanawaji',
            'lastname' => 'Ekenekiso',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);
        $user['birthday'] = '2023-12-12';
        $response = $this->postJson(route('v1.signup'),
            $user
        )->assertStatus(201);

        $response->assertJson(fn (AssertableJson $json) => $json
            ->where('status', true)
            ->where('message', 'Please verify your email address')
            ->where('data.firstname', 'Ugbanawaji')
            ->where('data.lastname', 'Ekenekiso')
            ->etc()
        );

    }

    /** @test */
    public function new_users_can_register_and_email_verification_notice_sent(): void
    {

        Notification::fake();

        $role = Role::factory()->create();
        Notification::assertNothingSent();
        $user = User::factory()->raw([
            'firstname' => 'Ugbanawaji',
            'lastname' => 'Ekenekiso',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);
        $user['birthday'] = '2023-12-12';
        $response = $this->postJson(route('v1.signup'),
            $user
        )->assertStatus(201);

        $this->assertDatabaseCount('users', 1);

        $user = User::find($response->json('data.id'));

        Notification::assertSentTo(
            [$user], ApiEmailVerificationNotification::class
        );

    }

    //    /** @test */
    //    public function new_users_has_user_setting(): void
    //    {
    //        $role = Role::factory()->create();
    //        $response = $this->postJson(route('v1.signup'),
    //            $user = User::factory()->raw([
    //                'name' => 'Ugbanawaji Ekenekiso',
    //                'password' => 'password',
    //                'password_confirmation' => 'password',
    //            ])
    //        )->assertStatus(201);
    //
    //        $this->assertDatabaseHas('user_settings', [
    //            'record_session' => 0,
    //            'user_id' => $response->json('data.id'),
    //        ]);
    //
    //    }

    /** @test */
    public function a_new_users_must_have_at_least_a_role(): void
    {
        $user = User::factory()->raw([
            'firstname' => 'Ugbanawaji',
            'lastname' => 'Ekenekiso',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);
        $user['birthday'] = '2023-12-12';
        $response = $this->postJson(route('v1.signup'),
            $user
        )->assertStatus(201);

        $this->assertDatabaseHas('role_user', [
            'role_id' => $this->role->id,
            'user_id' => $response->json('data.id'),
        ]);

    }

    /** @test */
    public function new_users_can_register_with_a_referral(): void
    {
        $referral = User::factory()->create();
        $user = User::factory()->raw([
            'firstname' => 'Ugbanawaji',
            'lastname' => 'Ekenekiso',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);
        $user['birthday'] = '2023-12-12';
        $user['referrer'] = $referral->username;
        $response = $this->postJson(route('v1.signup'),
            $user
        )->assertStatus(201);

        $response->assertJson(fn (AssertableJson $json) => $json
            ->where('status', true)
            ->where('message', 'Please verify your email address')
            ->where('data.firstname', 'Ugbanawaji')
            ->where('data.lastname', 'Ekenekiso')
            ->etc()
        );

        $this->assertDatabaseHas('users', [
            'referrer_id' => $referral->id,
            'id' => $response->json('data')['id'],
        ]);

    }
}
